0
晦气
NOTE
	# 修补式提交
	$ git commit --amend -m "remove sth."

1
多步悔棋
NOTE
	# 实验 1
	# 查看版本库最近的三个提交
	$ git log --stat --pretty=oneline -3
	# 要将最近的两个提交压缩为一个,并更改提交说明
	# 重置,回到两次提交之前
	$ git reset --soft HEAD^^
	# 查看状态和日志后执行提交操作
	$ git status
	$ git log -1
	$ git commit -m "modify text"
	$ git log --stat --pretty=oneline -2

2
拣选指令
NOTE
	# 实现在新的分支上"重放",需要提供一个提交ID作为参数
	# 实验 2
	# 对最近6个提交进行标识
	$ git tag F
	$ git tag E HEAD^
	$ git tag D HEAD^^
	$ git tag C HEAD^^^
	$ git tag B HEAD~4
	$ git tag A HEAD~5
	$ git log --oneline --decorate -6
	
	# 为了消灭D,需要暂时将HEAD头指针切换到Ｃ
	$ git checkout C
	# 执行拣选操作将E提交在当前HEAD上重放(注意到E==master^)
	$ git cherry-pick master^
	# 执行拣选操作将F提交在HEAD上重放
	$ git cherry-pick master
	# 查看日志确认D被消灭,且新提交的哈希值改变
	$ git log --oneline --decorate -6
	# 将master分支重置到新的提交上
	$ git checkout master
	$ git reset --hard HEAD@{1}

	# 重置场景
	$　git checkout master
	$ git reset --hard F
	$ git log --oneline --decorate -6

	# 融合D
	$ git checkout D
	# 悔棋两次以便融合C与D
	$ git reset --soft HEAD^^
	# 执行提交,提交说明重用C提交的说明
	$ git commit -C C
	# 执行拣选操作将E提交在当前HEAD上重放
	$ git cherry-pick E
	# 执行拣选操作将F提交在当前HEAD上重放
	$ git cherry-pick F
	# 查看日志
	# 将master分支指向新的提交ID上
	$ git checkout master
	$ git reset --hard HEAD@{1}

3
rebase
NOTE
	# 对提交执行变基操作,即将指定范围的提交"嫁接"到另一个提交上,范围为(<since>,<till>]
	$ git rebase --onto <newbase> <since> <till>
	
	# 变基操作的过程:
	$ git checkout # 切换到<till>,如果只想的不是一个分支,则是在detached HEAD状态进行.则变基结束后需要对master分支执行重置以实现变基结果在分支中生效
	# 将<since>..<till>所提交的范围写入一个临时文件
	# 将当前分支强制重置(git reset --hard)到<newbase>
	# 从临时文件的提交列表中,将提交按顺序重新提交到重置后的分支上
	# 如果遇到提交已经在分支中包含,则跳过该提交
	# 如果在提交过程遇到冲突,则变基过程暂停,冲突解决后执行git rebase --continue继续或者 git rebase --skip 跳过提交或者执行 git rebase --abort终止
	# 将E和F提交跳过D,嫁接到C上
	$ git rebase --onto C E^ F
	# 交互式变基
	$ git rebase -i D^ # 修改文件保存退出即可

4
反转提交
NOTE
	# 重新做一次新的提交,相当于用错误的历史提交的反向提交,来修正错误的历史提交
	$ git show HEAD
	# 在不改变提交的前提下撤销对其修改
	$ git revert HEAD
